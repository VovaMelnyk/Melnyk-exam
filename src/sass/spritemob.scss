// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$header-m-name: 'header.m';
$header-m-x: 0px;
$header-m-y: 0px;
$header-m-offset-x: 0px;
$header-m-offset-y: 0px;
$header-m-width: 320px;
$header-m-height: 542px;
$header-m-total-width: 960px;
$header-m-total-height: 542px;
$header-m-image: '../img/spritemob.jpg';
$header-m: (0px, 0px, 0px, 0px, 320px, 542px, 960px, 542px, '../img/spritemob.jpg', 'header.m', );
$step1-m-name: 'step1.m';
$step1-m-x: 640px;
$step1-m-y: 0px;
$step1-m-offset-x: -640px;
$step1-m-offset-y: 0px;
$step1-m-width: 320px;
$step1-m-height: 274px;
$step1-m-total-width: 960px;
$step1-m-total-height: 542px;
$step1-m-image: '../img/spritemob.jpg';
$step1-m: (640px, 0px, -640px, 0px, 320px, 274px, 960px, 542px, '../img/spritemob.jpg', 'step1.m', );
$step2-m-name: 'step2.m';
$step2-m-x: 640px;
$step2-m-y: 274px;
$step2-m-offset-x: -640px;
$step2-m-offset-y: -274px;
$step2-m-width: 320px;
$step2-m-height: 267px;
$step2-m-total-width: 960px;
$step2-m-total-height: 542px;
$step2-m-image: '../img/spritemob.jpg';
$step2-m: (640px, 274px, -640px, -274px, 320px, 267px, 960px, 542px, '../img/spritemob.jpg', 'step2.m', );
$step3-m-name: 'step3.m';
$step3-m-x: 320px;
$step3-m-y: 0px;
$step3-m-offset-x: -320px;
$step3-m-offset-y: 0px;
$step3-m-width: 320px;
$step3-m-height: 275px;
$step3-m-total-width: 960px;
$step3-m-total-height: 542px;
$step3-m-image: '../img/spritemob.jpg';
$step3-m: (320px, 0px, -320px, 0px, 320px, 275px, 960px, 542px, '../img/spritemob.jpg', 'step3.m', );
$spritesheet-width: 960px;
$spritesheet-height: 542px;
$spritesheet-image: '../img/spritemob.jpg';
$spritesheet-sprites: ($header-m, $step1-m, $step2-m, $step3-m, );
$spritesheet: (960px, 542px, '../img/spritemob.jpg', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
